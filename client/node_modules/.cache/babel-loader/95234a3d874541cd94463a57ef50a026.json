{"ast":null,"code":"var _jsxFileName = \"/Users/wojtas/Desktop/Kodilla/final-project/src/components/views/Cart/Cart.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport Avatar from '@material-ui/core/Avatar';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport IconButton from '@material-ui/core/IconButton';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport clsx from 'clsx';\nimport { connect } from 'react-redux';\nimport { getCart, addToCart, removeOneFromCart, removeCart } from '../../../redux/cartRedux';\nimport styles from './Cart.module.scss';\nimport { Typography } from '@material-ui/core';\n\nclass Cart extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      email: '',\n      phone: '',\n      date: this.setDate(),\n      products: this.props.cart,\n      totalPrice: this.setTotal(this.props.cart)\n    };\n  }\n\n  setTotal(products) {\n    let cost = null;\n    products.map(product => {\n      cost += product.totalCost;\n      return cost;\n    });\n    return cost;\n  }\n\n  setDate() {\n    const today = new Date();\n    return this.setState({\n      date: today.getDate() + '.' + (1 + today.getMonth()) + '.' + today.getFullYear()\n    });\n  }\n\n  render() {\n    const cart = this.props.cart;\n\n    if (cart.length <= 0) {\n      return React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, \"Your cart is empty !\");\n    } else {\n      return React.createElement(\"div\", {\n        className: clsx(styles.root),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, \"Cart:\"), React.createElement(\"div\", {\n        className: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, React.createElement(List, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, cart.map(product => React.createElement(ListItem, {\n        key: product._id,\n        button: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, React.createElement(ListItemAvatar, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, React.createElement(Avatar, {\n        srcSet: product.type === 'cake' ? require('../../../images/products/cakes/' + product.img) : require('../../../images/products/cupcakes/' + product.img),\n        variant: \"square\",\n        className: styles.avatar,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      })), React.createElement(ListItemText, {\n        primary: product.title,\n        secondary: React.createElement(React.Fragment, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 69\n          },\n          __self: this\n        }, React.createElement(Typography, {\n          variant: \"subtitle2\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 70\n          },\n          __self: this\n        }, 'price: $' + product.price), React.createElement(Typography, {\n          variant: \"subtitle2\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 75\n          },\n          __self: this\n        }, 'amount: x' + product.amount), React.createElement(Typography, {\n          variant: \"subtitle2\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 80\n          },\n          __self: this\n        }, 'total cost: $' + product.totalCost), product.wishes ? React.createElement(Typography, {\n          variant: \"subtitle2\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 86\n          },\n          __self: this\n        }, 'wishes: ' + product.wishes) : ''),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }), React.createElement(ListItemSecondaryAction, {\n        onClick: () => this.props.removeOneFromCart(product.id),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, React.createElement(IconButton, {\n        edge: \"end\",\n        \"aria-label\": \"delete\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, React.createElement(DeleteIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }))))))));\n    }\n  }\n\n}\n\nCart.propTypes = {\n  cart: PropTypes.array,\n  removeOneFromCart: PropTypes.func\n};\n\nconst mapStateToProps = state => ({\n  cart: getCart(state)\n});\n\nconst mapDispatchToProps = dispatch => ({\n  addToCart: data => dispatch(addToCart(data)),\n  removeOneFromCart: index => dispatch(removeOneFromCart(index)),\n  removeCart: () => dispatch(removeCart())\n});\n\nconst Container = connect(mapStateToProps, mapDispatchToProps)(Cart);\nexport { // Component as Cart,\nContainer as Cart, Cart as CartComponent };","map":{"version":3,"sources":["/Users/wojtas/Desktop/Kodilla/final-project/src/components/views/Cart/Cart.js"],"names":["React","PropTypes","List","ListItem","ListItemAvatar","Avatar","ListItemSecondaryAction","ListItemText","IconButton","DeleteIcon","clsx","connect","getCart","addToCart","removeOneFromCart","removeCart","styles","Typography","Cart","Component","state","email","phone","date","setDate","products","props","cart","totalPrice","setTotal","cost","map","product","totalCost","today","Date","setState","getDate","getMonth","getFullYear","render","length","root","container","_id","type","require","img","avatar","title","price","amount","wishes","id","propTypes","array","func","mapStateToProps","mapDispatchToProps","dispatch","data","index","Container","CartComponent"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport Avatar from '@material-ui/core/Avatar';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport IconButton from '@material-ui/core/IconButton';\nimport DeleteIcon from '@material-ui/icons/Delete';\n\nimport clsx from 'clsx';\n\nimport { connect } from 'react-redux';\nimport { getCart, addToCart, removeOneFromCart, removeCart } from '../../../redux/cartRedux';\n\nimport styles from './Cart.module.scss';\nimport { Typography } from '@material-ui/core';\n\nclass Cart extends React.Component {\n  state = {\n    email: '',\n    phone: '',\n    date: this.setDate(),\n    products: this.props.cart,\n    totalPrice: this.setTotal(this.props.cart),\n  };\n\n\n  setTotal(products){\n    let cost = null;\n    products.map(product => {\n      cost += product.totalCost;\n      return cost;\n    });\n    return cost;\n  }\n\n  setDate(){\n    const today = new Date();\n    return this.setState({date: today.getDate() + '.' + (1 + today.getMonth()) + '.' + today.getFullYear()});\n  }\n\n  render(){\n    const { cart } = this.props;\n    if(cart.length <= 0){\n      return(\n        <h2>Your cart is empty !</h2>\n      );\n    } else {\n      return(\n        <div className={clsx(styles.root)}>\n          <h2>Cart:</h2>\n          <div className={styles.container}>\n            <List>\n              {cart.map(product => (\n                <ListItem key={product._id} button>\n                  <ListItemAvatar>\n                    <Avatar\n                      srcSet={product.type === 'cake' ? require('../../../images/products/cakes/' + product.img) : require('../../../images/products/cupcakes/' + product.img)}\n                      variant='square'\n                      className={styles.avatar}\n                    />\n                  </ListItemAvatar>\n                  <ListItemText\n                    primary={product.title}\n                    secondary={\n                      <React.Fragment>\n                        <Typography\n                          variant='subtitle2'\n                        >\n                          {'price: $' + product.price}\n                        </Typography>\n                        <Typography\n                          variant='subtitle2'\n                        >\n                          {'amount: x' + product.amount}\n                        </Typography>\n                        <Typography\n                          variant='subtitle2'\n                        >\n                          {'total cost: $' + product.totalCost}\n                        </Typography>\n                        {product.wishes ? (\n                          <Typography\n                            variant='subtitle2'\n                          >\n                            {'wishes: ' + product.wishes}\n                          </Typography>\n                        ) : ''}\n                      </React.Fragment>\n                    }\n                  />\n                  <ListItemSecondaryAction onClick={() => this.props.removeOneFromCart(product.id)}>\n                    <IconButton edge=\"end\" aria-label=\"delete\" >\n                      <DeleteIcon />\n                    </IconButton>\n                  </ListItemSecondaryAction>\n                </ListItem>\n              ))}\n            </List>\n          </div>\n        </div>\n      );\n    }\n  }\n}\n\nCart.propTypes = {\n  cart: PropTypes.array,\n  removeOneFromCart: PropTypes.func,\n};\n\nconst mapStateToProps = state => ({\n  cart: getCart(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  addToCart: data => dispatch(addToCart(data)),\n  removeOneFromCart: index => dispatch(removeOneFromCart(index)),\n  removeCart: () => dispatch(removeCart()),\n});\n\nconst Container = connect(mapStateToProps, mapDispatchToProps)(Cart);\n\nexport {\n  // Component as Cart,\n  Container as Cart,\n  Cart as CartComponent,\n};\n"]},"metadata":{},"sourceType":"module"}